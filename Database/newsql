--------------------------------------------------------
--  File created - Tuesday-April-15-2025   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence BLOGS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."BLOGS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CATEGORIES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."CATEGORIES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 7 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CONTACTMESSAGES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."CONTACTMESSAGES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence NEWSLETTER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."NEWSLETTER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ORDERDETAILS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."ORDERDETAILS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 72 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ORDERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."ORDERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 32 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PRODUCTCATEGORIES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."PRODUCTCATEGORIES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 70 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PRODUCTRATINGS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."PRODUCTRATINGS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PRODUCTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."PRODUCTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 32 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SETTINGS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."SETTINGS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SHOP_SETTINGS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."SHOP_SETTINGS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence USERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 17 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VOUCHERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."VOUCHERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VOUCHERUSAGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."VOUCHERUSAGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WISHLIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AARON_IPT"."WISHLIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table CATEGORIES
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."CATEGORIES" 
   (	"CATEGORYID" NUMBER(*,0), 
	"NAME" VARCHAR2(255 BYTE), 
	"DESCRIPTION" VARCHAR2(4000 BYTE), 
	"PARENTCATEGORYID" NUMBER(*,0), 
	"DATECREATED" DATE DEFAULT SYSDATE, 
	"DATEMODIFIED" DATE DEFAULT SYSDATE, 
	"ISACTIVE" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table ORDERDETAILS
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."ORDERDETAILS" 
   (	"ORDERDETAILID" NUMBER, 
	"ORDERID" NUMBER, 
	"PRODUCTID" NUMBER, 
	"QUANTITY" NUMBER(*,0), 
	"PRICE" NUMBER(10,2), 
	"ISACTIVE" NUMBER(1,0) DEFAULT 1, 
	"COSTPRICE" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table ORDERS
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."ORDERS" 
   (	"ORDERID" NUMBER, 
	"USERID" NUMBER, 
	"ORDERDATE" DATE DEFAULT SYSDATE, 
	"TOTALAMOUNT" NUMBER(10,2), 
	"ISACTIVE" NUMBER(1,0) DEFAULT 1, 
	"STATUS" VARCHAR2(20 BYTE) DEFAULT 'Pending', 
	"SHIPPINGADDRESS" VARCHAR2(255 BYTE), 
	"PAYMENTMETHOD" VARCHAR2(50 BYTE) DEFAULT 'Cash on Delivery'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

   COMMENT ON COLUMN "AARON_IPT"."ORDERS"."STATUS" IS 'Order status (Pending, Processing, Shipped, Delivered, Cancelled)';
--------------------------------------------------------
--  DDL for Table PRODUCTCATEGORIES
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."PRODUCTCATEGORIES" 
   (	"PRODUCTCATEGORYID" NUMBER(*,0), 
	"PRODUCTID" NUMBER(*,0), 
	"CATEGORYID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table PRODUCTRATINGS
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."PRODUCTRATINGS" 
   (	"RATINGID" NUMBER, 
	"PRODUCTID" NUMBER, 
	"USERID" NUMBER, 
	"RATING" NUMBER(2,1), 
	"REVIEW" CLOB, 
	"DATESUBMITTED" DATE DEFAULT SYSDATE, 
	"ISAPPROVED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" 
 LOB ("REVIEW") STORE AS BASICFILE (
  TABLESPACE "SYSTEM" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table PRODUCTS
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."PRODUCTS" 
   (	"PRODUCTID" NUMBER(*,0), 
	"NAME" VARCHAR2(255 BYTE), 
	"DESCRIPTION" VARCHAR2(4000 BYTE), 
	"PRICE" NUMBER(10,2), 
	"STOCKQUANTITY" NUMBER(*,0), 
	"IMAGE" BLOB, 
	"ISLATEST" NUMBER(1,0) DEFAULT 0, 
	"DATECREATED" DATE DEFAULT SYSDATE, 
	"DATEMODIFIED" DATE DEFAULT SYSDATE, 
	"ISACTIVE" NUMBER(1,0) DEFAULT 1, 
	"COSTPRICE" NUMBER(10,2) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" 
 LOB ("IMAGE") STORE AS BASICFILE (
  TABLESPACE "SYSTEM" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table SETTINGS
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."SETTINGS" 
   (	"SETTINGID" NUMBER, 
	"KEY" VARCHAR2(50 BYTE), 
	"VALUE" VARCHAR2(4000 BYTE), 
	"DATECREATED" DATE DEFAULT SYSDATE, 
	"DATEMODIFIED" DATE DEFAULT SYSDATE, 
	"ISACTIVE" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."USERS" 
   (	"USERID" NUMBER(*,0), 
	"USERNAME" VARCHAR2(255 BYTE), 
	"PASSWORDHASH" VARCHAR2(4000 BYTE), 
	"EMAIL" VARCHAR2(255 BYTE), 
	"ROLE" VARCHAR2(50 BYTE) DEFAULT 'Customer', 
	"LASTLOGIN" DATE, 
	"DATECREATED" DATE DEFAULT SYSDATE, 
	"DATEMODIFIED" DATE DEFAULT SYSDATE, 
	"ISACTIVE" NUMBER(1,0) DEFAULT 1, 
	"FIRSTNAME" VARCHAR2(255 BYTE), 
	"LASTNAME" VARCHAR2(255 BYTE), 
	"PHONENUMBER" VARCHAR2(50 BYTE), 
	"FAILEDLOGINATTEMPTS" NUMBER(2,0) DEFAULT 0, 
	"ACCOUNTSTATUS" VARCHAR2(20 BYTE) DEFAULT 'Active', 
	"LOCKOUTUNTIL" DATE, 
	"ISGOOGLEAUTH" NUMBER(1,0) DEFAULT 0, 
	"GOOGLEID" VARCHAR2(255 BYTE), 
	"REMEMBERTOKEN" VARCHAR2(255 BYTE), 
	"REMEMBERTOKENEXPIRY" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

   COMMENT ON COLUMN "AARON_IPT"."USERS"."FIRSTNAME" IS 'User first name';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."LASTNAME" IS 'User last name';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."PHONENUMBER" IS 'User phone number with unique constraint';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."FAILEDLOGINATTEMPTS" IS 'Number of consecutive failed login attempts';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."ACCOUNTSTATUS" IS 'Account status: Active, Locked, Suspended';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."LOCKOUTUNTIL" IS 'Timestamp until account is locked';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."ISGOOGLEAUTH" IS 'Flag indicating if user authenticates via Google';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."GOOGLEID" IS 'Google account identifier for OAuth users';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."REMEMBERTOKEN" IS 'Token for "Remember Me" functionality';
   COMMENT ON COLUMN "AARON_IPT"."USERS"."REMEMBERTOKENEXPIRY" IS 'Expiration date for remember token';
--------------------------------------------------------
--  DDL for Table VOUCHERS
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."VOUCHERS" 
   (	"VOUCHERID" NUMBER, 
	"CODE" VARCHAR2(50 BYTE), 
	"DISCOUNTTYPE" VARCHAR2(10 BYTE), 
	"VALUE" NUMBER(10,2), 
	"MINIMUMPURCHASE" NUMBER(10,2), 
	"MAXUSES" NUMBER, 
	"EXPIRYDATE" DATE, 
	"DATECREATED" DATE DEFAULT SYSDATE, 
	"DATEMODIFIED" DATE DEFAULT SYSDATE, 
	"ISACTIVE" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table VOUCHERUSAGE
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."VOUCHERUSAGE" 
   (	"VOUCHERUSAGEID" NUMBER, 
	"VOUCHERID" NUMBER, 
	"USERID" NUMBER, 
	"ORDERID" NUMBER, 
	"REDEEMEDAT" DATE DEFAULT SYSDATE, 
	"ISACTIVE" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table WISHLIST
--------------------------------------------------------

  CREATE TABLE "AARON_IPT"."WISHLIST" 
   (	"WISHLISTID" NUMBER, 
	"USERID" NUMBER, 
	"PRODUCTID" NUMBER, 
	"DATEADDED" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for View DASHBOARD_REVENUE_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "AARON_IPT"."DASHBOARD_REVENUE_VIEW" ("ORDER_DATE", "ORDER_COUNT", "TOTAL_REVENUE", "PENDING_COUNT", "PENDING_REVENUE", "APPROVED_COUNT", "APPROVED_REVENUE") AS 
  SELECT 
    TRUNC(o.ORDERDATE) AS ORDER_DATE,
    COUNT(DISTINCT o.ORDERID) AS ORDER_COUNT,
    SUM(od.PRICE) AS TOTAL_REVENUE,
    COUNT(DISTINCT CASE WHEN o.STATUS = 'Pending' THEN o.ORDERID END) AS PENDING_COUNT,
    SUM(CASE WHEN o.STATUS = 'Pending' THEN od.PRICE ELSE 0 END) AS PENDING_REVENUE,
    COUNT(DISTINCT CASE WHEN o.STATUS = 'Approved' THEN o.ORDERID END) AS APPROVED_COUNT,
    SUM(CASE WHEN o.STATUS = 'Approved' THEN od.PRICE ELSE 0 END) AS APPROVED_REVENUE
FROM 
    ORDERS o
JOIN 
    ORDERDETAILS od ON o.ORDERID = od.ORDERID
WHERE 
    o.ISACTIVE = 1
    AND od.ISACTIVE = 1
GROUP BY 
    TRUNC(o.ORDERDATE)
;
--------------------------------------------------------
--  DDL for View REVENUE_SUMMARY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "AARON_IPT"."REVENUE_SUMMARY" ("TIME_RANGE", "REVENUE") AS 
  SELECT
    'today' AS TIME_RANGE,
    NVL(SUM(OD.PRICE * OD.QUANTITY - NVL(OD.COSTPRICE, 0) * OD.QUANTITY), 0) AS REVENUE
FROM
    ORDERS O
JOIN
    ORDERDETAILS OD ON O.ORDERID = OD.ORDERID
WHERE
    TRUNC(O.ORDERDATE) = TRUNC(SYSDATE)
AND
    O.STATUS IN ('Completed', 'Approved', 'Delivered', 'Shipped', 'Processing')
UNION ALL
SELECT
    'yesterday' AS TIME_RANGE,
    NVL(SUM(OD.PRICE * OD.QUANTITY - NVL(OD.COSTPRICE, 0) * OD.QUANTITY), 0) AS REVENUE
FROM
    ORDERS O
JOIN
    ORDERDETAILS OD ON O.ORDERID = OD.ORDERID
WHERE
    TRUNC(O.ORDERDATE) = TRUNC(SYSDATE) - 1
AND
    O.STATUS IN ('Completed', 'Approved', 'Delivered', 'Shipped', 'Processing')
UNION ALL
SELECT
    'week' AS TIME_RANGE,
    NVL(SUM(OD.PRICE * OD.QUANTITY - NVL(OD.COSTPRICE, 0) * OD.QUANTITY), 0) AS REVENUE
FROM
    ORDERS O
JOIN
    ORDERDETAILS OD ON O.ORDERID = OD.ORDERID
WHERE
    O.ORDERDATE >= TRUNC(SYSDATE) - 7
AND
    O.STATUS IN ('Completed', 'Approved', 'Delivered', 'Shipped', 'Processing')
UNION ALL
SELECT
    'month' AS TIME_RANGE,
    NVL(SUM(OD.PRICE * OD.QUANTITY - NVL(OD.COSTPRICE, 0) * OD.QUANTITY), 0) AS REVENUE
FROM
    ORDERS O
JOIN
    ORDERDETAILS OD ON O.ORDERID = OD.ORDERID
WHERE
    O.ORDERDATE >= TRUNC(SYSDATE) - 30
AND
    O.STATUS IN ('Completed', 'Approved', 'Delivered', 'Shipped', 'Processing')
;
REM INSERTING into AARON_IPT.CATEGORIES
SET DEFINE OFF;
Insert into AARON_IPT.CATEGORIES (CATEGORYID,NAME,DESCRIPTION,PARENTCATEGORYID,DATECREATED,DATEMODIFIED,ISACTIVE) values (1,'Cakes','Delicious celebration cakes for all occasions',null,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.CATEGORIES (CATEGORYID,NAME,DESCRIPTION,PARENTCATEGORYID,DATECREATED,DATEMODIFIED,ISACTIVE) values (2,'Cupcakes','Individual cupcakes with creative toppings',null,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.CATEGORIES (CATEGORYID,NAME,DESCRIPTION,PARENTCATEGORYID,DATECREATED,DATEMODIFIED,ISACTIVE) values (3,'Macaroons','Colorful French-style macaroons with various fillings',null,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.CATEGORIES (CATEGORYID,NAME,DESCRIPTION,PARENTCATEGORYID,DATECREATED,DATEMODIFIED,ISACTIVE) values (4,'Pastries','Flaky and delicious pastry creations',null,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.CATEGORIES (CATEGORYID,NAME,DESCRIPTION,PARENTCATEGORYID,DATECREATED,DATEMODIFIED,ISACTIVE) values (5,'Breads','Freshly baked breads and buns',null,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.CATEGORIES (CATEGORYID,NAME,DESCRIPTION,PARENTCATEGORYID,DATECREATED,DATEMODIFIED,ISACTIVE) values (6,'Donuts','Sweet fried dough treats with various toppings',null,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
commit;
REM INSERTING into AARON_IPT.ORDERDETAILS
SET DEFINE OFF;
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (27,1,2,3,150,1,60);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (28,2,2,3,150,1,60);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (29,2,4,2,299.99,1,120);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (30,3,4,3,299.99,1,120);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (31,3,1,3,99.99,1,40);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (32,3,6,3,200,1,80);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (33,4,2,2,150,1,60);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (34,5,1,3,99.99,1,40);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (35,6,3,2,120.5,1,48);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (36,7,2,2,150,1,60);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (37,8,1,1,99.99,1,40);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (38,8,1,1,99.99,1,40);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (39,8,6,1,200,1,80);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (40,9,2,1,150,1,60);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (41,9,2,1,150,1,60);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (42,10,6,1,200,1,80);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (43,11,3,2,120.5,1,48);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (44,11,6,2,200,1,80);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (45,12,5,1,75.5,1,30);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (46,13,1,1,99.99,1,40);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (47,13,4,2,299.99,1,120);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (63,29,1,1,399.99,1,160);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (64,29,2,1,246,1,98.4);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (65,30,1,2,299.99,1,120);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (66,30,2,1,175.5,1,70.2);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (67,30,3,1,75.02,1,30);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (68,31,1,2,200,1,80);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (69,31,2,1,120,1,48);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (70,31,3,4,150,1,60);
Insert into AARON_IPT.ORDERDETAILS (ORDERDETAILID,ORDERID,PRODUCTID,QUANTITY,PRICE,ISACTIVE,COSTPRICE) values (71,31,1,1,110,1,44);
commit;
REM INSERTING into AARON_IPT.ORDERS
SET DEFINE OFF;
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (1,2,to_date('03/31/2025','MM/DD/RRRR'),450,1,'Delivered','123 Bonifacio St, Makati City','Credit Card');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (2,3,to_date('04/01/2025','MM/DD/RRRR'),1049.98,1,'Shipped','456 Rizal Ave, Quezon City','GCash');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (3,4,to_date('04/02/2025','MM/DD/RRRR'),1799.94,1,'Processing','789 Mabini St, Manila','Cash on Delivery');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (4,5,to_date('04/03/2025','MM/DD/RRRR'),300,1,'Approved','101 Aguinaldo Blvd, Cavite','PayMaya');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (5,6,to_date('04/04/2025','MM/DD/RRRR'),299.97,1,'Approved','202 Luna St, Pasig City','Bank Transfer');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (6,7,to_date('04/05/2025','MM/DD/RRRR'),241,1,'Approved','303 Recto Ave, Manila','Cash on Delivery');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (7,8,to_date('04/06/2025','MM/DD/RRRR'),300,1,'Approved','404 Taft Ave, Pasay City','GCash');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (8,9,to_date('03/30/2025','MM/DD/RRRR'),399.98,1,'Delivered','505 Quezon Blvd, Quezon City','Credit Card');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (9,10,to_date('03/29/2025','MM/DD/RRRR'),300,1,'Delivered','606 Shaw Blvd, Mandaluyong','PayMaya');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (10,11,to_date('03/28/2025','MM/DD/RRRR'),200,1,'Cancelled','707 EDSA, Caloocan City','Bank Transfer');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (11,2,to_date('04/06/2025','MM/DD/RRRR'),641,1,'Approved','123 Bonifacio St, Makati City','Credit Card');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (12,3,to_date('04/06/2025','MM/DD/RRRR'),75.5,1,'Approved','456 Rizal Ave, Quezon City','GCash');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (13,4,to_date('04/06/2025','MM/DD/RRRR'),699.97,1,'Processing','789 Mabini St, Manila','Cash on Delivery');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (21,2,to_date('04/07/2025','MM/DD/RRRR'),645.99,1,'Approved','123 Main Street, Metro City','Credit Card');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (23,4,to_date('04/07/2025','MM/DD/RRRR'),850.5,1,'Approved','456 Oak Avenue, Downtown','PayPal');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (25,6,to_date('04/07/2025','MM/DD/RRRR'),1280,1,'Approved','789 Pine Road, Uptown','Bank Transfer');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (26,2,to_date('04/07/2025','MM/DD/RRRR'),645.99,1,'Approved','123 Main Street, Metro City','Credit Card');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (27,2,to_date('04/07/2025','MM/DD/RRRR'),850.5,1,'Approved','456 Oak Avenue, Downtown','PayPal');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (28,2,to_date('04/07/2025','MM/DD/RRRR'),1280,1,'Approved','789 Pine Road, Uptown','Bank Transfer');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (29,2,to_date('04/07/2025','MM/DD/RRRR'),1291.98,1,'Approved','123 Main Street, Metro City','Credit Card');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (30,2,to_date('04/07/2025','MM/DD/RRRR'),1701,1,'Approved','456 Oak Avenue, Downtown','PayPal');
Insert into AARON_IPT.ORDERS (ORDERID,USERID,ORDERDATE,TOTALAMOUNT,ISACTIVE,STATUS,SHIPPINGADDRESS,PAYMENTMETHOD) values (31,2,to_date('04/07/2025','MM/DD/RRRR'),2510,1,'Approved','789 Pine Road, Uptown','Bank Transfer');
commit;
REM INSERTING into AARON_IPT.PRODUCTCATEGORIES
SET DEFINE OFF;
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (44,3,1);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (42,1,1);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (46,30,6);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (61,15,3);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (48,24,5);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (59,13,3);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (57,6,2);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (55,10,2);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (56,7,2);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (58,16,4);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (65,19,4);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (66,18,4);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (62,14,3);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (63,12,3);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (64,11,3);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (60,4,1);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (67,17,4);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (69,31,1);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (53,8,2);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (52,20,4);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (54,9,2);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (50,22,5);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (51,21,5);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (49,23,5);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (43,5,1);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (35,26,6);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (47,25,5);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (33,28,6);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (34,27,6);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (41,2,1);
Insert into AARON_IPT.PRODUCTCATEGORIES (PRODUCTCATEGORYID,PRODUCTID,CATEGORYID) values (32,29,6);
commit;
REM INSERTING into AARON_IPT.PRODUCTRATINGS
SET DEFINE OFF;
Insert into AARON_IPT.PRODUCTRATINGS (RATINGID,PRODUCTID,USERID,RATING,DATESUBMITTED,ISAPPROVED) values (1,1,2,5,to_date('04/01/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.PRODUCTRATINGS (RATINGID,PRODUCTID,USERID,RATING,DATESUBMITTED,ISAPPROVED) values (2,6,2,4.5,to_date('04/01/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.PRODUCTRATINGS (RATINGID,PRODUCTID,USERID,RATING,DATESUBMITTED,ISAPPROVED) values (3,2,3,4,to_date('04/02/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.PRODUCTRATINGS (RATINGID,PRODUCTID,USERID,RATING,DATESUBMITTED,ISAPPROVED) values (4,16,4,5,to_date('04/03/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.PRODUCTRATINGS (RATINGID,PRODUCTID,USERID,RATING,DATESUBMITTED,ISAPPROVED) values (5,26,6,3.5,to_date('04/04/2025','MM/DD/RRRR'),1);
commit;
REM INSERTING into AARON_IPT.PRODUCTS
SET DEFINE OFF;
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (1,'Ube Cake','Traditional Filipino purple yam cake with creamy frosting',750,25,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,500);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (2,'Mango Bravo Cake','Layered cake with fresh mangoes and cream',850,20,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,600);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (3,'Chocolate Mousse Cake','Rich chocolate cake with creamy mousse layers',780,8,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,510);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (4,'Red Velvet Cake','Classic red velvet cake with cream cheese frosting',820,15,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,550);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (5,'Sans Rival Cake','Traditional Filipino layered cake with buttercream and cashews',950,0,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,650);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (6,'Ube Cupcake','Purple yam cupcake with creamy frosting and ube halaya center',95,60,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,45);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (7,'Red Velvet Cupcake','Classic red velvet cupcake with cream cheese frosting',85,50,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,40);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (8,'Chocolate Cupcake','Rich chocolate cupcake with chocolate ganache',80,55,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,38);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (9,'Vanilla Cupcake','Classic vanilla cupcake with buttercream frosting',75,45,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,35);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (10,'Salted Caramel Cupcake','Vanilla cupcake with salted caramel center and frosting',95,7,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,45);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (11,'Ube Macaroons','Purple yam flavored French macaroons',85,40,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,45);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (12,'Chocolate Macaroons','Rich chocolate French macaroons with ganache filling',85,45,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,45);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (13,'Strawberry Macaroons','Strawberry flavored French macaroons with jam filling',85,35,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,45);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (14,'Lemon Macaroons','Lemon flavored French macaroons with citrus filling',85,30,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,45);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (15,'Coffee Macaroons','Coffee flavored French macaroons with espresso ganache',90,9,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,48);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (16,'Ensaymada','Traditional Filipino sweet pastry with butter and cheese topping',85,40,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,40);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (17,'Croissant','Flaky buttery French pastry',75,35,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,35);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (18,'Hopia','Filipino pastry with mung bean filling',65,50,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,30);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (19,'Chocolate Eclair','Choux pastry filled with custard and topped with chocolate',95,30,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,45);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (20,'Apple Turnover','Flaky pastry filled with caramelized apples',85,6,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,40);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (21,'Ube Pandesal','Filipino purple yam bread rolls',80,60,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,35);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (22,'Cheese Bread','Soft bread with cheese filling and topping',75,55,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,30);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (23,'Monay','Traditional Filipino dense bread rolls',65,65,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,25);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (24,'Spanish Bread','Filipino sweet bread with buttery filling',70,50,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,30);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (25,'Pan de Coco','Filipino bread with sweet coconut filling',75,10,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,32);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (26,'Ube Donut','Purple yam filled donut with glaze',85,30,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,40);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (27,'Chocolate Donut','Chocolate glazed donut with sprinkles',75,35,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,35);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (28,'Bavarian Donut','Donut filled with Bavarian cream',80,25,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,38);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (29,'Strawberry Donut','Donut with strawberry glaze and filling',80,20,0,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,38);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (30,'Glazed Donut','Classic glazed ring donut',65,5,1,to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,30);
Insert into AARON_IPT.PRODUCTS (PRODUCTID,NAME,DESCRIPTION,PRICE,STOCKQUANTITY,ISLATEST,DATECREATED,DATEMODIFIED,ISACTIVE,COSTPRICE) values (31,'Strawberry Shortcake','a sweet biscuit or crumbly cake',1099,34,1,to_date('04/13/2025','MM/DD/RRRR'),to_date('04/13/2025','MM/DD/RRRR'),1,700);
commit;
REM INSERTING into AARON_IPT.SETTINGS
SET DEFINE OFF;
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (1,'SHOP_NAME','Online Pastry Shop',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (2,'CURRENCY','PHP',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (3,'DELIVERY_FEE','150',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (4,'FREE_DELIVERY_THRESHOLD','1500',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (5,'CONTACT_EMAIL','pastryshop@example.com',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (6,'CONTACT_PHONE','+639123456789',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (7,'BUSINESS_HOURS','8:00 AM - 7:00 PM',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (8,'SOCIAL_FACEBOOK','https://facebook.com/onlinepastryshop',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (9,'SOCIAL_INSTAGRAM','https://instagram.com/onlinepastryshop',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.SETTINGS (SETTINGID,KEY,VALUE,DATECREATED,DATEMODIFIED,ISACTIVE) values (10,'ABOUT_US','We are a premier online pastry shop offering delicious Filipino pastries and international desserts made with the finest ingredients.',to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
commit;
REM INSERTING into AARON_IPT.USERS
SET DEFINE OFF;
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (1,'admin','eef53b3b59d3f5d46b3f78a51ae7454e1b19cca1ae37d03c25e299c34598b23d','admin@ocakes.com','Admin',to_date('04/13/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'admin','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (2,'joaquin_garcia','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','joaquin@example.com','Customer',to_date('04/04/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'joaquin_garcia','User',null,1,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (3,'maria_santos','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','maria@example.com','Customer',to_date('04/03/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'maria_santos','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (4,'jose_reyes','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','jose@example.com','Customer',to_date('04/04/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'jose_reyes','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (5,'angelica_cruz','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','angelica@example.com','Customer',to_date('04/01/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'angelica_cruz','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (6,'antonio_mendoza','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','antonio@example.com','Customer',to_date('04/02/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'antonio_mendoza','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (7,'rosario_lim','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','rosario@example.com','Customer',to_date('04/05/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'rosario_lim','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (8,'eduardo_gonzales','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','eduardo@example.com','Customer',to_date('03/31/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'eduardo_gonzales','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (9,'carmela_ramos','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','carmela@example.com','Customer',to_date('04/03/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'carmela_ramos','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (10,'fernando_aquino','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','fernando@example.com','Customer',to_date('04/02/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'fernando_aquino','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (11,'patricia_domingo','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','patricia@example.com','Customer',to_date('03/30/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'patricia_domingo','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (12,'ricardo_tan','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','ricardo@example.com','Customer',to_date('04/04/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'ricardo_tan','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (13,'victoria_castro','8c6c200ec4b3570646a33a3cced3fd141b09c3102ee4e98dd34871d5e90b3aad','victoria@example.com','Customer',to_date('03/29/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'victoria_castro','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (14,'gabriel_pascual','eef53b3b59d3f5d46b3f78a51ae7454e1b19cca1ae37d03c25e299c34598b23d','gabriel@example.com','Customer',to_date('04/14/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'gabriel_pascual','User',null,0,'Active',null,0,null,null,null);
Insert into AARON_IPT.USERS (USERID,USERNAME,PASSWORDHASH,EMAIL,ROLE,LASTLOGIN,DATECREATED,DATEMODIFIED,ISACTIVE,FIRSTNAME,LASTNAME,PHONENUMBER,FAILEDLOGINATTEMPTS,ACCOUNTSTATUS,LOCKOUTUNTIL,ISGOOGLEAUTH,GOOGLEID,REMEMBERTOKEN,REMEMBERTOKENEXPIRY) values (15,'qwen','eef53b3b59d3f5d46b3f78a51ae7454e1b19cca1ae37d03c25e299c34598b23d','isabella@example.com','Customer',to_date('04/14/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1,'isabella_dizon','User',null,0,'Active',null,0,null,null,null);
commit;
REM INSERTING into AARON_IPT.VOUCHERS
SET DEFINE OFF;
Insert into AARON_IPT.VOUCHERS (VOUCHERID,CODE,DISCOUNTTYPE,VALUE,MINIMUMPURCHASE,MAXUSES,EXPIRYDATE,DATECREATED,DATEMODIFIED,ISACTIVE) values (1,'WELCOME10','PERCENT',10,500,1,to_date('05/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.VOUCHERS (VOUCHERID,CODE,DISCOUNTTYPE,VALUE,MINIMUMPURCHASE,MAXUSES,EXPIRYDATE,DATECREATED,DATEMODIFIED,ISACTIVE) values (2,'NEWCUST20','PERCENT',20,1000,1,to_date('05/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.VOUCHERS (VOUCHERID,CODE,DISCOUNTTYPE,VALUE,MINIMUMPURCHASE,MAXUSES,EXPIRYDATE,DATECREATED,DATEMODIFIED,ISACTIVE) values (3,'PASTRY50','FIXED',50,300,100,to_date('06/05/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.VOUCHERS (VOUCHERID,CODE,DISCOUNTTYPE,VALUE,MINIMUMPURCHASE,MAXUSES,EXPIRYDATE,DATECREATED,DATEMODIFIED,ISACTIVE) values (4,'FREESHIP','FIXED',100,1500,50,to_date('05/21/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.VOUCHERS (VOUCHERID,CODE,DISCOUNTTYPE,VALUE,MINIMUMPURCHASE,MAXUSES,EXPIRYDATE,DATECREATED,DATEMODIFIED,ISACTIVE) values (5,'HOLIDAY25','PERCENT',25,800,200,to_date('07/05/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),to_date('04/06/2025','MM/DD/RRRR'),1);
commit;
REM INSERTING into AARON_IPT.VOUCHERUSAGE
SET DEFINE OFF;
Insert into AARON_IPT.VOUCHERUSAGE (VOUCHERUSAGEID,VOUCHERID,USERID,ORDERID,REDEEMEDAT,ISACTIVE) values (1,1,2,1,to_date('03/31/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.VOUCHERUSAGE (VOUCHERUSAGEID,VOUCHERID,USERID,ORDERID,REDEEMEDAT,ISACTIVE) values (2,3,5,4,to_date('04/03/2025','MM/DD/RRRR'),1);
Insert into AARON_IPT.VOUCHERUSAGE (VOUCHERUSAGEID,VOUCHERID,USERID,ORDERID,REDEEMEDAT,ISACTIVE) values (3,2,8,7,to_date('04/06/2025','MM/DD/RRRR'),1);
commit;
REM INSERTING into AARON_IPT.WISHLIST
SET DEFINE OFF;
Insert into AARON_IPT.WISHLIST (WISHLISTID,USERID,PRODUCTID,DATEADDED) values (1,2,5,to_date('03/27/2025','MM/DD/RRRR'));
Insert into AARON_IPT.WISHLIST (WISHLISTID,USERID,PRODUCTID,DATEADDED) values (2,3,10,to_date('03/29/2025','MM/DD/RRRR'));
Insert into AARON_IPT.WISHLIST (WISHLISTID,USERID,PRODUCTID,DATEADDED) values (3,4,15,to_date('03/31/2025','MM/DD/RRRR'));
Insert into AARON_IPT.WISHLIST (WISHLISTID,USERID,PRODUCTID,DATEADDED) values (4,5,20,to_date('04/02/2025','MM/DD/RRRR'));
Insert into AARON_IPT.WISHLIST (WISHLISTID,USERID,PRODUCTID,DATEADDED) values (5,6,25,to_date('04/04/2025','MM/DD/RRRR'));
commit;
--------------------------------------------------------
--  DDL for Index IDX_ORDER_DETAILS_PRODUCT
--------------------------------------------------------

  CREATE INDEX "AARON_IPT"."IDX_ORDER_DETAILS_PRODUCT" ON "AARON_IPT"."ORDERDETAILS" ("PRODUCTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index IDX_ORDERS_USER
--------------------------------------------------------

  CREATE INDEX "AARON_IPT"."IDX_ORDERS_USER" ON "AARON_IPT"."ORDERS" ("USERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index IDX_ORDERS_STATUS_DATE
--------------------------------------------------------

  CREATE INDEX "AARON_IPT"."IDX_ORDERS_STATUS_DATE" ON "AARON_IPT"."ORDERS" ("STATUS", "ORDERDATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index IDX_ORDERS_STATUS
--------------------------------------------------------

  CREATE INDEX "AARON_IPT"."IDX_ORDERS_STATUS" ON "AARON_IPT"."ORDERS" ("STATUS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index IDX_ORDERS_DATE
--------------------------------------------------------

  CREATE INDEX "AARON_IPT"."IDX_ORDERS_DATE" ON "AARON_IPT"."ORDERS" ("ORDERDATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index IDX_PRODUCTS_FEATURED
--------------------------------------------------------

  CREATE INDEX "AARON_IPT"."IDX_PRODUCTS_FEATURED" ON "AARON_IPT"."PRODUCTS" ("ISLATEST") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Trigger CATEGORIES_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."CATEGORIES_TRIGGER" 
BEFORE INSERT ON CATEGORIES
FOR EACH ROW
BEGIN
    SELECT CATEGORIES_SEQ.NEXTVAL INTO :NEW.CATEGORYID FROM DUAL;
    :NEW.DATECREATED := SYSDATE;
    :NEW.DATEMODIFIED := SYSDATE;
END;

/
ALTER TRIGGER "AARON_IPT"."CATEGORIES_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ORDERDETAILS_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."ORDERDETAILS_TRIGGER" 
BEFORE INSERT ON ORDERDETAILS
FOR EACH ROW
BEGIN
    SELECT ORDERDETAILS_SEQ.NEXTVAL INTO :NEW.ORDERDETAILID FROM DUAL;
END;

/
ALTER TRIGGER "AARON_IPT"."ORDERDETAILS_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ORDERS_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."ORDERS_TRIGGER" 
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
    SELECT ORDERS_SEQ.NEXTVAL INTO :NEW.ORDERID FROM DUAL;
END;

/
ALTER TRIGGER "AARON_IPT"."ORDERS_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRODUCTCATEGORIES_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."PRODUCTCATEGORIES_TRIGGER" 
BEFORE INSERT ON PRODUCTCATEGORIES
FOR EACH ROW
BEGIN
    SELECT PRODUCTCATEGORIES_SEQ.NEXTVAL INTO :NEW.PRODUCTCATEGORYID FROM DUAL;
END;

/
ALTER TRIGGER "AARON_IPT"."PRODUCTCATEGORIES_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRODUCTRATINGS_TRG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."PRODUCTRATINGS_TRG" 
BEFORE INSERT ON PRODUCTRATINGS
FOR EACH ROW
BEGIN
    SELECT PRODUCTRATINGS_SEQ.NEXTVAL INTO :NEW.RATINGID FROM DUAL;
END;

/
ALTER TRIGGER "AARON_IPT"."PRODUCTRATINGS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRODUCTS_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."PRODUCTS_TRIGGER" 
BEFORE INSERT ON PRODUCTS
FOR EACH ROW
BEGIN
    SELECT PRODUCTS_SEQ.NEXTVAL INTO :NEW.PRODUCTID FROM DUAL;
    :NEW.DATECREATED := SYSDATE;
    :NEW.DATEMODIFIED := SYSDATE;
END;

/
ALTER TRIGGER "AARON_IPT"."PRODUCTS_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SETTINGS_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."SETTINGS_TRIGGER" 
BEFORE INSERT ON SETTINGS
FOR EACH ROW
BEGIN
    SELECT SETTINGS_SEQ.NEXTVAL INTO :NEW.SETTINGID FROM DUAL;
    :NEW.DATECREATED := SYSDATE;
    :NEW.DATEMODIFIED := SYSDATE;
END;

/
ALTER TRIGGER "AARON_IPT"."SETTINGS_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_ORDER_STATUS_TRACK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."TRG_ORDER_STATUS_TRACK" 
AFTER UPDATE OF STATUS ON ORDERS
FOR EACH ROW
BEGIN
    IF :NEW.STATUS <> :OLD.STATUS THEN
        -- Store the status change history (implement as needed)
        NULL;
    END IF;
END;

/
ALTER TRIGGER "AARON_IPT"."TRG_ORDER_STATUS_TRACK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_PRODUCT_STOCK_CHECK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."TRG_PRODUCT_STOCK_CHECK" 
AFTER UPDATE OF STOCKQUANTITY ON PRODUCTS
FOR EACH ROW
BEGIN
    IF :NEW.STOCKQUANTITY <= 10 AND :NEW.STOCKQUANTITY > 0 THEN
        -- Log low stock alert (implement as needed)
        NULL;
    ELSIF :NEW.STOCKQUANTITY = 0 THEN
        -- Log out of stock alert (implement as needed)
        NULL;
    END IF;
END;

/
ALTER TRIGGER "AARON_IPT"."TRG_PRODUCT_STOCK_CHECK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_ORDER_TOTAL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."TRG_UPDATE_ORDER_TOTAL" 
AFTER INSERT OR UPDATE OR DELETE ON ORDERDETAILS
FOR EACH ROW
BEGIN
    -- Use separate IF statements instead of complex CASE expressions
    IF INSERTING THEN
        UPDATE ORDERS SET TOTALAMOUNT = TOTALAMOUNT + (:NEW.PRICE * :NEW.QUANTITY)
        WHERE ORDERID = :NEW.ORDERID;
    ELSIF UPDATING THEN
        UPDATE ORDERS SET TOTALAMOUNT = TOTALAMOUNT + (:NEW.PRICE * :NEW.QUANTITY) - (:OLD.PRICE * :OLD.QUANTITY)
        WHERE ORDERID = :NEW.ORDERID;
    ELSIF DELETING THEN
        UPDATE ORDERS SET TOTALAMOUNT = TOTALAMOUNT - (:OLD.PRICE * :OLD.QUANTITY)
        WHERE ORDERID = :OLD.ORDERID;
    END IF;
END;

/
ALTER TRIGGER "AARON_IPT"."TRG_UPDATE_ORDER_TOTAL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERS_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."USERS_TRIGGER" 
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT USERS_SEQ.NEXTVAL INTO :NEW.USERID FROM DUAL;
    :NEW.DATECREATED := SYSDATE;
    :NEW.DATEMODIFIED := SYSDATE;
END;

/
ALTER TRIGGER "AARON_IPT"."USERS_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VOUCHERS_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."VOUCHERS_TRIGGER" 
BEFORE INSERT ON VOUCHERS
FOR EACH ROW
BEGIN
    SELECT VOUCHERS_SEQ.NEXTVAL INTO :NEW.VOUCHERID FROM DUAL;
    :NEW.DATECREATED := SYSDATE;
    :NEW.DATEMODIFIED := SYSDATE;
END;

/
ALTER TRIGGER "AARON_IPT"."VOUCHERS_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VOUCHERUSAGE_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."VOUCHERUSAGE_TRIGGER" 
BEFORE INSERT ON VOUCHERUSAGE
FOR EACH ROW
BEGIN
    SELECT VOUCHERUSAGE_SEQ.NEXTVAL INTO :NEW.VOUCHERUSAGEID FROM DUAL;
END;

/
ALTER TRIGGER "AARON_IPT"."VOUCHERUSAGE_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger WISHLIST_TRG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "AARON_IPT"."WISHLIST_TRG" 
BEFORE INSERT ON WISHLIST
FOR EACH ROW
BEGIN
    SELECT WISHLIST_SEQ.NEXTVAL INTO :NEW.WISHLISTID FROM DUAL;
END;

/
ALTER TRIGGER "AARON_IPT"."WISHLIST_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure APPROVE_ORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."APPROVE_ORDER" (
    p_order_id IN NUMBER,
    p_success OUT NUMBER,
    p_message OUT VARCHAR2
) AS
    v_order_exists NUMBER;
    v_correct_total NUMBER;
BEGIN
    -- Check if order exists
    SELECT COUNT(*) INTO v_order_exists
    FROM ORDERS
    WHERE ORDERID = p_order_id AND ISACTIVE = 1;

    IF v_order_exists = 0 THEN
        p_success := 0;
        p_message := 'Order not found or inactive';
        RETURN;
    END IF;

    -- Calculate correct total from order details
    SELECT NVL(SUM(PRICE), 0) INTO v_correct_total
    FROM ORDERDETAILS
    WHERE ORDERID = p_order_id AND ISACTIVE = 1;

    -- Update order status and ensure total amount is correct
    UPDATE ORDERS
    SET STATUS = 'Approved',
        TOTALAMOUNT = v_correct_total
    WHERE ORDERID = p_order_id AND ISACTIVE = 1;

    -- Return success
    p_success := 1;
    p_message := 'Order approved successfully. Total amount: ' || v_correct_total;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        p_success := 0;
        p_message := 'Error: ' || SQLERRM;
END;

/
--------------------------------------------------------
--  DDL for Procedure CALCULATE_DASHBOARD_REVENUE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."CALCULATE_DASHBOARD_REVENUE" (
    p_start_date IN DATE,
    p_end_date IN DATE,
    p_current_revenue OUT NUMBER,
    p_previous_revenue OUT NUMBER,
    p_percentage_change OUT NUMBER
) AS
    v_previous_start_date DATE;
    v_previous_end_date DATE;
BEGIN
    -- Calculate date range for previous period (same duration)
    v_previous_start_date := p_start_date - (p_end_date - p_start_date + 1);
    v_previous_end_date := p_start_date - 1;

    -- Calculate current period revenue using order details sum
    SELECT NVL(SUM(od.PRICE), 0)
    INTO p_current_revenue
    FROM ORDERDETAILS od
    JOIN ORDERS o ON od.ORDERID = o.ORDERID
    WHERE o.STATUS = 'Approved'
    AND o.ISACTIVE = 1
    AND od.ISACTIVE = 1
    AND o.ORDERDATE BETWEEN p_start_date AND p_end_date;

    -- Calculate previous period revenue
    SELECT NVL(SUM(od.PRICE), 0)
    INTO p_previous_revenue
    FROM ORDERDETAILS od
    JOIN ORDERS o ON od.ORDERID = o.ORDERID
    WHERE o.STATUS = 'Approved'
    AND o.ISACTIVE = 1
    AND od.ISACTIVE = 1
    AND o.ORDERDATE BETWEEN v_previous_start_date AND v_previous_end_date;

    -- Calculate percentage change
    IF p_previous_revenue > 0 THEN
        p_percentage_change := ((p_current_revenue - p_previous_revenue) / p_previous_revenue) * 100;
    ELSE
        p_percentage_change := 0;
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure CALCULATE_REVENUE_STATS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."CALCULATE_REVENUE_STATS" (
    p_time_range IN VARCHAR2,
    p_order_count OUT NUMBER,
    p_detail_count OUT NUMBER,
    p_total_revenue OUT NUMBER,
    p_profit OUT NUMBER
) AS
    v_date_condition VARCHAR2(200);
BEGIN
    -- Initialize outputs
    p_order_count := 0;
    p_detail_count := 0;
    p_total_revenue := 0;
    p_profit := 0;
    
    -- Set the date condition based on time range
    CASE p_time_range
        WHEN 'today' THEN
            v_date_condition := 'TRUNC(ORDERDATE) = TRUNC(SYSDATE)';
        WHEN 'yesterday' THEN
            v_date_condition := 'TRUNC(ORDERDATE) = TRUNC(SYSDATE) - 1';
        WHEN 'week' THEN
            v_date_condition := 'TRUNC(ORDERDATE) >= TRUNC(SYSDATE) - 7';
        WHEN 'month' THEN
            v_date_condition := 'TRUNC(ORDERDATE) >= TRUNC(SYSDATE) - 30';
        ELSE
            v_date_condition := 'TRUNC(ORDERDATE) = TRUNC(SYSDATE)'; -- Default to today
    END CASE;
    
    -- Get approved order count
    EXECUTE IMMEDIATE 
        'SELECT COUNT(*) FROM AARON_IPT.ORDERS WHERE STATUS = ''Approved'' AND ' || v_date_condition
        INTO p_order_count;
    
    -- Get order details count
    EXECUTE IMMEDIATE 
        'SELECT COUNT(*) FROM AARON_IPT.ORDERDETAILS OD ' ||
        'JOIN AARON_IPT.ORDERS O ON OD.ORDERID = O.ORDERID ' ||
        'WHERE O.STATUS = ''Approved'' AND ' || v_date_condition
        INTO p_detail_count;
    
    -- Calculate total revenue (sum of order details prices)
    EXECUTE IMMEDIATE 
        'SELECT NVL(SUM(OD.QUANTITY * OD.PRICE), 0) ' ||
        'FROM AARON_IPT.ORDERDETAILS OD ' ||
        'JOIN AARON_IPT.ORDERS O ON OD.ORDERID = O.ORDERID ' ||
        'WHERE O.STATUS = ''Approved'' AND ' || v_date_condition
        INTO p_total_revenue;
    
    -- Calculate profit (revenue - cost) - using COSTPRICE column from PRODUCTS table
    EXECUTE IMMEDIATE 
        'SELECT NVL(SUM(OD.QUANTITY * (OD.PRICE - P.COSTPRICE)), 0) ' ||
        'FROM AARON_IPT.ORDERDETAILS OD ' ||
        'JOIN AARON_IPT.ORDERS O ON OD.ORDERID = O.ORDERID ' ||
        'JOIN AARON_IPT.PRODUCTS P ON OD.PRODUCTID = P.PRODUCTID ' ||
        'WHERE O.STATUS = ''Approved'' AND ' || v_date_condition
        INTO p_profit;
    
EXCEPTION
    WHEN OTHERS THEN
        -- Log error
        DBMS_OUTPUT.PUT_LINE('Error in CALCULATE_REVENUE_STATS: ' || SQLERRM);
        RAISE;
END CALCULATE_REVENUE_STATS;

/
--------------------------------------------------------
--  DDL for Procedure CALC_REVENUE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."CALC_REVENUE" (
  p_start_date IN DATE,
  p_end_date IN DATE,
  p_revenue OUT NUMBER)
AS
BEGIN
  SELECT NVL(SUM(OD.PRICE * OD.QUANTITY), 0) INTO p_revenue
  FROM ORDERS O
  JOIN ORDERDETAILS OD ON O.ORDERID = OD.ORDERID
  WHERE O.STATUS = 'Approved'
  AND O.ORDERDATE BETWEEN p_start_date AND p_end_date;
END;

/
--------------------------------------------------------
--  DDL for Procedure GET_INVENTORY_ALERTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."GET_INVENTORY_ALERTS" 
(
    p_low_stock_cursor OUT SYS_REFCURSOR,
    p_low_stock_count OUT NUMBER
) AS
BEGIN
    -- Get count of low stock items
    SELECT COUNT(*) 
    INTO p_low_stock_count
    FROM PRODUCTS
    WHERE STOCKQUANTITY > 0 
    AND STOCKQUANTITY <= 10
    AND ISACTIVE = 1;

    -- Open cursor for low stock items details
    OPEN p_low_stock_cursor FOR
    SELECT 
        PRODUCTID,
        NAME AS PRODUCT,
        STOCKQUANTITY AS STOCK
    FROM PRODUCTS
    WHERE STOCKQUANTITY > 0 
    AND STOCKQUANTITY <= 10
    AND ISACTIVE = 1
    ORDER BY STOCKQUANTITY ASC;
END;

/
--------------------------------------------------------
--  DDL for Procedure GET_INVENTORY_ALERTS_V2
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."GET_INVENTORY_ALERTS_V2" 
(
    p_low_stock_cursor OUT SYS_REFCURSOR,
    p_low_stock_count OUT NUMBER
) AS
BEGIN
    -- Get count of low stock items
    SELECT COUNT(*) 
    INTO p_low_stock_count
    FROM PRODUCTS
    WHERE STOCKQUANTITY > 0 
    AND STOCKQUANTITY <= 10
    AND ISACTIVE = 1;

    -- Open cursor for low stock items details with product name alias
    OPEN p_low_stock_cursor FOR
    SELECT 
        PRODUCTID,
        NAME,
        STOCKQUANTITY AS STOCK
    FROM PRODUCTS
    WHERE STOCKQUANTITY > 0 
    AND STOCKQUANTITY <= 10
    AND ISACTIVE = 1
    ORDER BY STOCKQUANTITY ASC;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_CALCULATE_ORDER_COMPARISON
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_CALCULATE_ORDER_COMPARISON" (
    p_start_date IN DATE,
    p_end_date IN DATE,
    p_prev_start_date IN DATE,
    p_prev_end_date IN DATE,
    p_current_orders OUT NUMBER,
    p_previous_orders OUT NUMBER,
    p_order_change OUT NUMBER
) AS
BEGIN
    -- Calculate current orders (all non-cancelled/rejected)
    SELECT COUNT(*)
    INTO p_current_orders
    FROM ORDERS O
    WHERE O.ORDERDATE BETWEEN p_start_date AND p_end_date
    AND O.STATUS NOT IN ('Cancelled', 'Rejected');

    -- Calculate previous orders
    SELECT COUNT(*)
    INTO p_previous_orders
    FROM ORDERS O
    WHERE O.ORDERDATE BETWEEN p_prev_start_date AND p_prev_end_date
    AND O.STATUS NOT IN ('Cancelled', 'Rejected');

    -- Calculate percentage change
    IF p_previous_orders IS NULL OR p_previous_orders = 0 THEN
         IF p_current_orders > 0 THEN
            p_order_change := 100.0;
        ELSE
            p_order_change := 0.0;
        END IF;
    ELSE
        p_order_change := ROUND(((p_current_orders - p_previous_orders) / p_previous_orders) * 100, 1);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        -- Log error or handle appropriately
        p_current_orders := 0;
        p_previous_orders := 0;
        p_order_change := 0;
        -- Consider logging SQLERRM
        RAISE;
END PRC_CALCULATE_ORDER_COMPARISON;

/
--------------------------------------------------------
--  DDL for Procedure PRC_CALC_REVENUE_COMP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_CALC_REVENUE_COMP" ( -- Shortened Name
    p_start_date IN DATE,
    p_end_date IN DATE,
    p_prev_start_date IN DATE,
    p_prev_end_date IN DATE,
    p_current_revenue OUT NUMBER,
    p_previous_revenue OUT NUMBER,
    p_revenue_change OUT NUMBER
) AS
BEGIN
    -- Calculate current revenue
    SELECT NVL(SUM(OD.QUANTITY * OD.PRICE), 0)
    INTO p_current_revenue
    FROM ORDERDETAILS OD
    JOIN ORDERS O ON OD.ORDERID = O.ORDERID
    WHERE O.ORDERDATE BETWEEN p_start_date AND p_end_date
    AND O.STATUS NOT IN ('Cancelled', 'Rejected', 'Pending');

    -- Calculate previous revenue
    SELECT NVL(SUM(OD.QUANTITY * OD.PRICE), 0)
    INTO p_previous_revenue
    FROM ORDERDETAILS OD
    JOIN ORDERS O ON OD.ORDERID = O.ORDERID
    WHERE O.ORDERDATE BETWEEN p_prev_start_date AND p_prev_end_date
    AND O.STATUS NOT IN ('Cancelled', 'Rejected', 'Pending');

    -- Calculate percentage change
    IF p_previous_revenue IS NULL OR p_previous_revenue = 0 THEN
        IF p_current_revenue > 0 THEN
            p_revenue_change := 100.0; -- Indicate increase if previous was zero
        ELSE
             p_revenue_change := 0.0; -- No change if both are zero
        END IF;
    ELSE
        p_revenue_change := ROUND(((p_current_revenue - p_previous_revenue) / p_previous_revenue) * 100, 1);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        p_current_revenue := 0;
        p_previous_revenue := 0;
        p_revenue_change := 0;
        -- Consider adding logging here using PRC_LOG_ERROR if it exists
        RAISE;
END PRC_CALC_REVENUE_COMP; -- Shortened Name

/
--------------------------------------------------------
--  DDL for Procedure PRC_CHECK_PHONE_EXISTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_CHECK_PHONE_EXISTS" (
    p_phonenumber IN VARCHAR2,
    p_exists OUT NUMBER
) AS
BEGIN
    SELECT COUNT(*) INTO p_exists
    FROM USERS
    WHERE PHONENUMBER = p_phonenumber;
END PRC_CHECK_PHONE_EXISTS;

/
--------------------------------------------------------
--  DDL for Procedure PRC_CHECK_USERNAME_EXISTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_CHECK_USERNAME_EXISTS" (
    p_username IN VARCHAR2,
    p_exists OUT NUMBER
) AS
BEGIN
    SELECT COUNT(*) INTO p_exists
    FROM USERS
    WHERE USERNAME = p_username;
END PRC_CHECK_USERNAME_EXISTS;

/
--------------------------------------------------------
--  DDL for Procedure PRC_CREATE_ORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_CREATE_ORDER" (
    p_user_id IN NUMBER,
    p_shipping_address IN VARCHAR2,
    p_billing_address IN VARCHAR2,
    p_payment_method IN VARCHAR2,
    p_shipping_method IN VARCHAR2,
    p_order_notes IN CLOB DEFAULT NULL, -- Changed from p_notes
    p_voucher_code IN VARCHAR2 DEFAULT NULL,
    p_order_id OUT NUMBER
) AS
    v_total_amount NUMBER := 0;
    v_discount_amount NUMBER := 0;
    v_voucher_id NUMBER;
    v_cart_count NUMBER;
BEGIN
    -- Create CART table if it doesn't exist
    BEGIN
        EXECUTE IMMEDIATE '
        CREATE TABLE CART (
            CARTID NUMBER PRIMARY KEY,
            USERID NUMBER NOT NULL,
            PRODUCTID NUMBER NOT NULL,
            QUANTITY NUMBER DEFAULT 1,
            DATEADDED DATE DEFAULT SYSDATE,
            CONSTRAINT FK_CART_USER FOREIGN KEY (USERID) REFERENCES USERS(USERID),
            CONSTRAINT FK_CART_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(PRODUCTID)
        )';
    EXCEPTION
        WHEN OTHERS THEN NULL; -- Table already exists
    END;

    -- Check if user has items in cart
    SELECT COUNT(*) INTO v_cart_count FROM CART WHERE USERID = p_user_id;

    IF v_cart_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20005, 'Cart is empty');
    END IF;

    -- Create order
    INSERT INTO ORDERS (
        USERID, ORDERDATE, STATUS, TOTALAMOUNT, SHIPPINGADDRESS, 
        BILLINGADDRESS, PAYMENTMETHOD, SHIPPINGMETHOD, NOTES
    ) VALUES (
        p_user_id, SYSDATE, 'Pending', 0, p_shipping_address, 
        p_billing_address, p_payment_method, p_shipping_method, p_order_notes
    ) RETURNING ORDERID INTO p_order_id;

    -- Apply voucher if provided
    IF p_voucher_code IS NOT NULL THEN
        BEGIN
            SELECT VOUCHERID, DISCOUNTAMOUNT 
            INTO v_voucher_id, v_discount_amount
            FROM VOUCHERS
            WHERE CODE = p_voucher_code
              AND ISACTIVE = 1
              AND (EXPIRYDATE IS NULL OR EXPIRYDATE > SYSDATE)
              AND (USAGELIMIT IS NULL OR USAGELIMIT > (
                SELECT COUNT(*) FROM VOUCHERUSAGE WHERE VOUCHERID = VOUCHERS.VOUCHERID
              ));

            -- Record voucher usage
            INSERT INTO VOUCHERUSAGE (VOUCHERID, ORDERID, USERID, DATE)
            VALUES (v_voucher_id, p_order_id, p_user_id, SYSDATE);

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_discount_amount := 0;
        END;
    END IF;

    -- Transfer cart items to order details
    INSERT INTO ORDERDETAILS (
        ORDERID, PRODUCTID, QUANTITY, PRICE, PRODUCTNAME
    )
    SELECT 
        p_order_id, C.PRODUCTID, C.QUANTITY, P.PRICE, P.NAME
    FROM 
        CART C
        JOIN PRODUCTS P ON C.PRODUCTID = P.PRODUCTID
    WHERE 
        C.USERID = p_user_id;

    -- Calculate total amount
    SELECT NVL(SUM(PRICE * QUANTITY), 0) 
    INTO v_total_amount
    FROM ORDERDETAILS
    WHERE ORDERID = p_order_id;

    -- Apply discount
    v_total_amount := v_total_amount - v_discount_amount;
    IF v_total_amount < 0 THEN v_total_amount := 0; END IF;

    -- Update order total
    UPDATE ORDERS
    SET TOTALAMOUNT = v_total_amount
    WHERE ORDERID = p_order_id;

    -- Update product stock
    FOR item IN (SELECT PRODUCTID, QUANTITY FROM ORDERDETAILS WHERE ORDERID = p_order_id)
    LOOP
        UPDATE PRODUCTS
        SET STOCKQUANTITY = STOCKQUANTITY - item.QUANTITY
        WHERE PRODUCTID = item.PRODUCTID;
    END LOOP;

    -- Clear user's cart
    DELETE FROM CART WHERE USERID = p_user_id;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_CREATE_ORDER;

/
--------------------------------------------------------
--  DDL for Procedure PRC_GET_DASHBOARD_PREFERENCES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_GET_DASHBOARD_PREFERENCES" (
    p_user_id IN NUMBER,
    p_revenue_visible OUT NUMBER,
    p_orders_visible OUT NUMBER,
    p_pending_orders_visible OUT NUMBER,
    p_low_stock_visible OUT NUMBER
)
AS
    v_exists NUMBER;
BEGIN
    -- Check if preferences exist for this user
    SELECT COUNT(*) INTO v_exists
    FROM DASHBOARD_PREFERENCES
    WHERE USER_ID = p_user_id;

    IF v_exists > 0 THEN
        -- Return existing preferences
        SELECT 
            REVENUE_VISIBLE, 
            ORDERS_VISIBLE, 
            PENDING_ORDERS_VISIBLE, 
            LOW_STOCK_VISIBLE
        INTO 
            p_revenue_visible, 
            p_orders_visible, 
            p_pending_orders_visible, 
            p_low_stock_visible
        FROM DASHBOARD_PREFERENCES
        WHERE USER_ID = p_user_id;
    ELSE
        -- Insert default preferences and return them
        INSERT INTO DASHBOARD_PREFERENCES (
            USER_ID, 
            REVENUE_VISIBLE, 
            ORDERS_VISIBLE, 
            PENDING_ORDERS_VISIBLE, 
            LOW_STOCK_VISIBLE
        ) VALUES (
            p_user_id, 
            1, -- Revenue visible by default
            1, -- Orders visible by default
            1, -- Pending orders visible by default
            1  -- Low stock visible by default
        );

        p_revenue_visible := 1;
        p_orders_visible := 1;
        p_pending_orders_visible := 1;
        p_low_stock_visible := 1;
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
            -- In case of error, return default values
            p_revenue_visible := 1;
            p_orders_visible := 1;
            p_pending_orders_visible := 1;
            p_low_stock_visible := 1;
            DBMS_OUTPUT.PUT_LINE('Error in PRC_GET_DASHBOARD_PREFERENCES: ' || SQLERRM);
END PRC_GET_DASHBOARD_PREFERENCES;

/
--------------------------------------------------------
--  DDL for Procedure PRC_GOOGLE_AUTH_LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_GOOGLE_AUTH_LOGIN" (
    p_google_id IN VARCHAR2,
    p_email IN VARCHAR2,
    p_firstname IN VARCHAR2,
    p_lastname IN VARCHAR2,
    p_user_id OUT NUMBER,
    p_username OUT VARCHAR2,
    p_role OUT VARCHAR2,
    p_is_new_user OUT NUMBER
) AS
    v_count NUMBER;
BEGIN
    p_is_new_user := 0;

    -- Check if user with this Google ID exists
    SELECT COUNT(*) INTO v_count
    FROM USERS
    WHERE GOOGLEID = p_google_id;

    IF v_count > 0 THEN
        -- User exists, get details
        SELECT USERID, USERNAME, ROLE
        INTO p_user_id, p_username, p_role
        FROM USERS
        WHERE GOOGLEID = p_google_id;

        -- Update last login time
        UPDATE USERS SET 
            LASTLOGIN = SYSDATE,
            FAILEDLOGINATTEMPTS = 0,
            ACCOUNTSTATUS = 'Active'
        WHERE USERID = p_user_id;
    ELSE
        -- Check if email exists
        SELECT COUNT(*) INTO v_count
        FROM USERS
        WHERE EMAIL = p_email;

        IF v_count > 0 THEN
            -- User exists with email but not linked to Google yet
            SELECT USERID, USERNAME, ROLE
            INTO p_user_id, p_username, p_role
            FROM USERS
            WHERE EMAIL = p_email;

            -- Link Google ID to existing account
            UPDATE USERS SET
                GOOGLEID = p_google_id,
                ISGOOGLEAUTH = 1,
                LASTLOGIN = SYSDATE,
                FAILEDLOGINATTEMPTS = 0,
                ACCOUNTSTATUS = 'Active'
            WHERE USERID = p_user_id;
        ELSE
            -- Create new user
            p_is_new_user := 1;
            p_username := p_email; -- Use email as username by default
            p_role := 'Customer';

            -- Generate random password for Google users (won't be used)
            INSERT INTO USERS (
                USERNAME, EMAIL, PASSWORDHASH, FIRSTNAME, LASTNAME,
                ROLE, LASTLOGIN, ISGOOGLEAUTH, GOOGLEID
            ) VALUES (
                p_username, p_email, DBMS_RANDOM.STRING('A', 32), 
                p_firstname, p_lastname, p_role, SYSDATE, 1, p_google_id
            ) RETURNING USERID INTO p_user_id;
        END IF;
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_GOOGLE_AUTH_LOGIN;

/
--------------------------------------------------------
--  DDL for Procedure PRC_PRODUCT_ADD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_PRODUCT_ADD" (
    p_name IN VARCHAR2,
    p_description IN CLOB,
    p_price IN NUMBER,
    p_costprice IN NUMBER,
    p_stockquantity IN NUMBER,
    p_category_id IN NUMBER, -- Changed from p_categoryid
    p_image IN VARCHAR2,
    p_shortdescription IN VARCHAR2 DEFAULT NULL,
    p_isfeatured IN NUMBER DEFAULT 0,
    p_isnew IN NUMBER DEFAULT 1,
    p_lowstockthreshold IN NUMBER DEFAULT 5,
    p_product_id OUT NUMBER
) AS
    v_seo_url VARCHAR2(200);
BEGIN
    -- Generate SEO-friendly URL
    v_seo_url := REGEXP_REPLACE(LOWER(p_name), '[^a-z0-9]+', '-');

    -- Insert the product
    INSERT INTO PRODUCTS (
        NAME, DESCRIPTION, PRICE, COSTPRICE, STOCKQUANTITY, 
        CATEGORY_ID, IMAGE, SHORTDESCRIPTION, ISFEATURED, 
        ISNEW, LOWSTOCKTHRESHOLD, SEO_URL, DATE, ISACTIVE
    ) VALUES (
        p_name, p_description, p_price, p_costprice, p_stockquantity, 
        p_category_id, p_image, p_shortdescription, p_isfeatured, 
        p_isnew, p_lowstockthreshold, v_seo_url, SYSDATE, 1
    ) RETURNING PRODUCTID INTO p_product_id;

    -- Create STOCKALERTS table if it doesn't exist
    BEGIN
        EXECUTE IMMEDIATE '
        CREATE TABLE STOCKALERTS (
            ALERTID NUMBER PRIMARY KEY,
            PRODUCTID NUMBER NOT NULL,
            ALERTDATE DATE DEFAULT SYSDATE,
            STOCKLEVEL NUMBER,
            ISRESOLVED NUMBER(1) DEFAULT 0,
            CONSTRAINT FK_STOCKALERT_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(PRODUCTID)
        )';
    EXCEPTION
        WHEN OTHERS THEN NULL; -- Table already exists
    END;

    -- Check if product is below threshold and create alert
    IF p_stockquantity <= p_lowstockthreshold THEN
        INSERT INTO STOCKALERTS (PRODUCTID, ALERTDATE, STOCKLEVEL, ISRESOLVED)
        VALUES (p_product_id, SYSDATE, p_stockquantity, 0);
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_PRODUCT_ADD;

/
--------------------------------------------------------
--  DDL for Procedure PRC_PRODUCT_RATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_PRODUCT_RATE" (
    p_product_id IN NUMBER,
    p_user_id IN NUMBER,
    p_rating IN NUMBER,
    p_review IN CLOB DEFAULT NULL,
    p_rating_id OUT NUMBER
) AS
    v_existing_rating NUMBER;
    v_avg_rating NUMBER;
BEGIN
    -- Create PRODUCTRATINGS table if it doesn't exist
    BEGIN
        EXECUTE IMMEDIATE '
        CREATE TABLE PRODUCTRATINGS (
            RATINGID NUMBER PRIMARY KEY,
            PRODUCTID NUMBER NOT NULL,
            USERID NUMBER NOT NULL,
            RATING NUMBER(1) NOT NULL,
            REVIEW CLOB,
            DATESUBMITTED DATE DEFAULT SYSDATE,
            ISAPPROVED NUMBER(1) DEFAULT 0,
            CONSTRAINT FK_RATING_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(PRODUCTID),
            CONSTRAINT FK_RATING_USER FOREIGN KEY (USERID) REFERENCES USERS(USERID)
        )';
    EXCEPTION
        WHEN OTHERS THEN NULL; -- Table already exists
    END;

    -- Check if user has already rated this product
    BEGIN
        SELECT RATINGID INTO v_existing_rating
        FROM PRODUCTRATINGS
        WHERE PRODUCTID = p_product_id AND USERID = p_user_id;

        -- Update existing rating
        UPDATE PRODUCTRATINGS
        SET RATING = p_rating,
            REVIEW = p_review,
            DATESUBMITTED = SYSDATE,
            ISAPPROVED = 0  -- Reset approval status for moderation
        WHERE RATINGID = v_existing_rating;

        p_rating_id := v_existing_rating;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- Insert new rating
            INSERT INTO PRODUCTRATINGS (
                PRODUCTID, USERID, RATING, REVIEW, DATESUBMITTED, ISAPPROVED
            ) VALUES (
                p_product_id, p_user_id, p_rating, p_review, SYSDATE, 0
            ) RETURNING RATINGID INTO p_rating_id;
    END;

    -- Calculate average rating without updating product table
    SELECT AVG(RATING) INTO v_avg_rating
    FROM PRODUCTRATINGS 
    WHERE PRODUCTID = p_product_id AND ISAPPROVED = 1;

    -- Output to log for debugging
    DBMS_OUTPUT.PUT_LINE('Product ' || p_product_id || ' has average rating of ' || v_avg_rating);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_PRODUCT_RATE;

/
--------------------------------------------------------
--  DDL for Procedure PRC_PRODUCT_UPDATE_STOCK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_PRODUCT_UPDATE_STOCK" (
    p_product_id IN NUMBER,
    p_quantity_change IN NUMBER,
    p_reason IN VARCHAR2,
    p_user_id IN NUMBER
) AS
    v_current_stock NUMBER;
    v_new_stock NUMBER;
    v_low_threshold NUMBER;
BEGIN
    -- Get current stock and threshold
    SELECT STOCKQUANTITY, LOWSTOCKTHRESHOLD 
    INTO v_current_stock, v_low_threshold
    FROM PRODUCTS 
    WHERE PRODUCTID = p_product_id;

    -- Calculate new stock level
    v_new_stock := v_current_stock + p_quantity_change;

    -- Prevent negative stock
    IF v_new_stock < 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'Stock cannot be negative');
    END IF;

    -- Update product stock
    UPDATE PRODUCTS
    SET STOCKQUANTITY = v_new_stock,
        DATE = SYSDATE  -- Using DATE instead of DATEUPDATED
    WHERE PRODUCTID = p_product_id;

    -- Create STOCK_MOVEMENTS table if it doesn't exist
    BEGIN
        EXECUTE IMMEDIATE '
        CREATE TABLE STOCK_MOVEMENTS (
            MOVEMENTID NUMBER PRIMARY KEY,
            PRODUCTID NUMBER NOT NULL,
            ADJUSTMENTDATE DATE DEFAULT SYSDATE,
            PREVIOUSSTOCK NUMBER,
            NEWSTOCK NUMBER,
            ADJUSTMENTQUANTITY NUMBER,
            REASON VARCHAR2(200),
            USERID NUMBER,
            CONSTRAINT FK_STOCKMOVE_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(PRODUCTID),
            CONSTRAINT FK_STOCKMOVE_USER FOREIGN KEY (USERID) REFERENCES USERS(USERID)
        )';
    EXCEPTION
        WHEN OTHERS THEN NULL; -- Table already exists
    END;

    -- Record stock movement
    INSERT INTO STOCK_MOVEMENTS (
        PRODUCTID, ADJUSTMENTDATE, PREVIOUSSTOCK, NEWSTOCK, 
        ADJUSTMENTQUANTITY, REASON, USERID
    ) VALUES (
        p_product_id, SYSDATE, v_current_stock, v_new_stock, 
        p_quantity_change, p_reason, p_user_id
    );

    -- Create STOCKALERTS table if it doesn't exist (already done in PRC_PRODUCT_ADD)

    -- Check if stock is now below threshold
    IF v_new_stock <= v_low_threshold AND v_current_stock > v_low_threshold THEN
        INSERT INTO STOCKALERTS (PRODUCTID, ALERTDATE, STOCKLEVEL, ISRESOLVED)
        VALUES (p_product_id, SYSDATE, v_new_stock, 0);
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_PRODUCT_UPDATE_STOCK;

/
--------------------------------------------------------
--  DDL for Procedure PRC_SAVE_DASHBOARD_PREFERENCES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_SAVE_DASHBOARD_PREFERENCES" (
    p_user_id IN NUMBER,
    p_revenue_visible IN NUMBER,
    p_orders_visible IN NUMBER,
    p_pending_orders_visible IN NUMBER,
    p_low_stock_visible IN NUMBER,
    p_success OUT NUMBER
)
AS
    v_exists NUMBER;
    v_visible_count NUMBER;
BEGIN
    -- Validate input
    v_visible_count := p_revenue_visible + p_orders_visible + p_pending_orders_visible + p_low_stock_visible;

    -- Ensure at least 3 components are visible
    IF v_visible_count < 3 THEN
        p_success := 0;
        RETURN;
    END IF;

    -- Check if preferences exist for this user
    SELECT COUNT(*) INTO v_exists
    FROM DASHBOARD_PREFERENCES
    WHERE USER_ID = p_user_id;

    IF v_exists > 0 THEN
        -- Update existing preferences
        UPDATE DASHBOARD_PREFERENCES
        SET 
            REVENUE_VISIBLE = p_revenue_visible,
            ORDERS_VISIBLE = p_orders_visible,
            PENDING_ORDERS_VISIBLE = p_pending_orders_visible,
            LOW_STOCK_VISIBLE = p_low_stock_visible,
            UPDATED_AT = CURRENT_TIMESTAMP
        WHERE USER_ID = p_user_id;
    ELSE
        -- Insert new preferences
        INSERT INTO DASHBOARD_PREFERENCES (
            USER_ID, 
            REVENUE_VISIBLE, 
            ORDERS_VISIBLE, 
            PENDING_ORDERS_VISIBLE, 
            LOW_STOCK_VISIBLE
        ) VALUES (
            p_user_id, 
            p_revenue_visible,
            p_orders_visible,
            p_pending_orders_visible,
            p_low_stock_visible
        );
    END IF;

    COMMIT;
    p_success := 1;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            p_success := 0;
            DBMS_OUTPUT.PUT_LINE('Error in PRC_SAVE_DASHBOARD_PREFERENCES: ' || SQLERRM);
END PRC_SAVE_DASHBOARD_PREFERENCES;

/
--------------------------------------------------------
--  DDL for Procedure PRC_UPDATE_ORDER_STATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_UPDATE_ORDER_STATUS" (
    p_order_id IN NUMBER,
    p_new_status IN VARCHAR2,
    p_user_id IN NUMBER,
    p_notes IN VARCHAR2 DEFAULT NULL
) AS
    v_current_status VARCHAR2(50);
    v_customer_id NUMBER;
    v_customer_email VARCHAR2(100);
BEGIN
    -- Create ORDER_STATUS_HISTORY table if it doesn't exist
    BEGIN
        EXECUTE IMMEDIATE '
        CREATE TABLE ORDER_STATUS_HISTORY (
            HISTORYID NUMBER PRIMARY KEY,
            ORDERID NUMBER NOT NULL,
            OLDSTATUS VARCHAR2(50),
            NEWSTATUS VARCHAR2(50),
            CHANGEDATE DATE DEFAULT SYSDATE,
            CHANGEDBY NUMBER,
            NOTES VARCHAR2(500),
            CONSTRAINT FK_ORDERHIST_ORDER FOREIGN KEY (ORDERID) REFERENCES ORDERS(ORDERID),
            CONSTRAINT FK_ORDERHIST_USER FOREIGN KEY (CHANGEDBY) REFERENCES USERS(USERID)
        )';
    EXCEPTION
        WHEN OTHERS THEN NULL; -- Table already exists
    END;

    -- Get current status and customer info
    SELECT O.STATUS, O.USERID, U.EMAIL
    INTO v_current_status, v_customer_id, v_customer_email
    FROM ORDERS O
    JOIN USERS U ON O.USERID = U.USERID
    WHERE O.ORDERID = p_order_id;

    -- Record status change in history
    INSERT INTO ORDER_STATUS_HISTORY (
        ORDERID, OLDSTATUS, NEWSTATUS, CHANGEDATE, CHANGEDBY, NOTES
    ) VALUES (
        p_order_id, v_current_status, p_new_status, SYSDATE, p_user_id, p_notes
    );

    -- Update order status
    UPDATE ORDERS
    SET STATUS = p_new_status,
        DATE = SYSDATE  -- Using DATE instead of STATUSCHANGEDATE
    WHERE ORDERID = p_order_id;

    -- Add DATEDELIVERED column if it doesn't exist
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TABLE ORDERS ADD (DATEDELIVERED DATE)';
    EXCEPTION
        WHEN OTHERS THEN NULL; -- Column already exists
    END;

    -- Special handling for specific statuses
    IF p_new_status = 'Delivered' THEN
        UPDATE ORDERS
        SET DATEDELIVERED = SYSDATE
        WHERE ORDERID = p_order_id;
    ELSIF p_new_status = 'Cancelled' THEN
        -- Return items to inventory
        FOR item IN (SELECT PRODUCTID, QUANTITY FROM ORDERDETAILS WHERE ORDERID = p_order_id)
        LOOP
            UPDATE PRODUCTS
            SET STOCKQUANTITY = STOCKQUANTITY + item.QUANTITY
            WHERE PRODUCTID = item.PRODUCTID;
        END LOOP;
    END IF;

    COMMIT;

    -- Send notification logic would go here in a real implementation

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_UPDATE_ORDER_STATUS;

/
--------------------------------------------------------
--  DDL for Procedure PRC_USER_FAILED_LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_USER_FAILED_LOGIN" (
    p_user_id IN NUMBER
) AS
    v_failed_attempts NUMBER;
    v_lockout_time DATE;
BEGIN
    -- Get current failed attempts
    SELECT NVL(FAILEDLOGINATTEMPTS, 0) INTO v_failed_attempts
    FROM USERS
    WHERE USERID = p_user_id;

    -- Increment failed attempts
    v_failed_attempts := v_failed_attempts + 1;

    -- If failed attempts reach 5, set lockout time to 5 minutes from now
    IF v_failed_attempts >= 5 THEN
        v_lockout_time := SYSDATE + (5/1440); -- 5 minutes (5/1440 of a day)

        UPDATE USERS SET
            FAILEDLOGINATTEMPTS = v_failed_attempts,
            ACCOUNTSTATUS = 'Locked',
            LOCKOUTUNTIL = v_lockout_time
        WHERE USERID = p_user_id;
    ELSE
        UPDATE USERS SET
            FAILEDLOGINATTEMPTS = v_failed_attempts
        WHERE USERID = p_user_id;
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_USER_FAILED_LOGIN;

/
--------------------------------------------------------
--  DDL for Procedure PRC_USER_LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_USER_LOGIN" (
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_user_id OUT NUMBER,
    p_username OUT VARCHAR2,
    p_firstname OUT VARCHAR2,
    p_lastname OUT VARCHAR2,
    p_role OUT VARCHAR2,
    p_success OUT NUMBER,
    p_message OUT VARCHAR2
) AS
    v_stored_password VARCHAR2(100);
    v_failed_attempts NUMBER;
    v_account_status VARCHAR2(20);
    v_lockout_until DATE;
BEGIN
    p_success := 0;
    p_message := 'Invalid email or password.';

    -- Get user information without referencing SALT
    BEGIN
        SELECT USERID, USERNAME, FIRSTNAME, LASTNAME, PASSWORDHASH, ROLE, 
               NVL(FAILEDLOGINATTEMPTS, 0), NVL(ACCOUNTSTATUS, 'Active'), LOCKOUTUNTIL
        INTO p_user_id, p_username, p_firstname, p_lastname, v_stored_password, p_role, 
             v_failed_attempts, v_account_status, v_lockout_until
        FROM USERS
        WHERE EMAIL = p_email
        AND ISACTIVE = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            p_success := 0;
            p_message := 'Invalid email or password.';
            RETURN;
    END;

    -- Check account status
    IF v_account_status = 'Locked' THEN
        IF v_lockout_until IS NOT NULL AND v_lockout_until > SYSDATE THEN
            p_success := 0;
            p_message := 'Your account is locked. Please try again later.';
            RETURN;
        ELSE
            -- Lockout period has expired, reset status
            UPDATE USERS SET 
                ACCOUNTSTATUS = 'Active',
                FAILEDLOGINATTEMPTS = 0,
                LOCKOUTUNTIL = NULL
            WHERE USERID = p_user_id;
        END IF;
    END IF;

    -- Verify password directly (without salt, using existing method)
    -- This assumes the stored password is already hashed or compared directly
    IF v_stored_password = p_password THEN
        -- Login successful
        p_success := 1;
        p_message := 'Login successful.';

        -- Reset failed attempts and update last login
        UPDATE USERS 
        SET FAILEDLOGINATTEMPTS = 0,
            LASTLOGIN = SYSDATE
        WHERE USERID = p_user_id;
    ELSE
        -- Login failed
        p_success := 0;

        -- Call the failed login procedure
        PRC_USER_FAILED_LOGIN(p_user_id);

        -- Check if account is now locked
        SELECT FAILEDLOGINATTEMPTS, ACCOUNTSTATUS 
        INTO v_failed_attempts, v_account_status
        FROM USERS
        WHERE USERID = p_user_id;

        IF v_account_status = 'Locked' THEN
            p_message := 'Too many failed attempts. Your account has been locked for 5 minutes.';
        ELSE
            p_message := 'Invalid email or password. You have ' || (5 - v_failed_attempts) || ' attempts remaining.';
        END IF;
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        p_success := 0;
        p_message := 'An error occurred during login.';
        RAISE;
END PRC_USER_LOGIN;

/
--------------------------------------------------------
--  DDL for Procedure PRC_USER_REGISTER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_USER_REGISTER" (
    p_username IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_firstname IN VARCHAR2,
    p_lastname IN VARCHAR2,
    p_phonenumber IN VARCHAR2,
    p_role IN VARCHAR2 DEFAULT 'Customer',
    p_user_id OUT NUMBER,
    p_success OUT NUMBER,
    p_message OUT VARCHAR2
) AS
    v_hashed_password VARCHAR2(100);
    v_email_count NUMBER;
    v_username_count NUMBER;
    v_phone_count NUMBER;
BEGIN
    p_success := 0;

    -- Check if email already exists
    SELECT COUNT(*) INTO v_email_count FROM USERS WHERE EMAIL = p_email;
    IF v_email_count > 0 THEN
        p_message := 'Email already exists.';
        RETURN;
    END IF;

    -- Check if username already exists
    SELECT COUNT(*) INTO v_username_count FROM USERS WHERE USERNAME = p_username;
    IF v_username_count > 0 THEN
        p_message := 'Username already exists.';
        RETURN;
    END IF;

    -- Check if phone number already exists (if provided)
    IF p_phonenumber IS NOT NULL THEN
        SELECT COUNT(*) INTO v_phone_count FROM USERS WHERE PHONENUMBER = p_phonenumber;
        IF v_phone_count > 0 THEN
            p_message := 'Phone number already registered.';
            RETURN;
        END IF;
    END IF;

    -- For now, store password directly (will be replaced with proper hashing in C# code)
    v_hashed_password := p_password;

    -- Insert new user
    INSERT INTO USERS (
        USERNAME, EMAIL, PASSWORDHASH, FIRSTNAME, LASTNAME, 
        PHONENUMBER, ROLE, ISACTIVE, DATECREATED, DATEMODIFIED
    ) VALUES (
        p_username, p_email, v_hashed_password, p_firstname, p_lastname,
        p_phonenumber, p_role, 1, SYSDATE, SYSDATE
    ) RETURNING USERID INTO p_user_id;

    COMMIT;
    p_success := 1;
    p_message := 'Registration successful.';
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        p_success := 0;
        p_message := 'An error occurred during registration.';
        RAISE;
END PRC_USER_REGISTER;

/
--------------------------------------------------------
--  DDL for Procedure PRC_USER_RESET_LOCKOUT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_USER_RESET_LOCKOUT" (
    p_user_id IN NUMBER
) AS
BEGIN
    UPDATE USERS SET
        FAILEDLOGINATTEMPTS = 0,
        ACCOUNTSTATUS = 'Active',
        LOCKOUTUNTIL = NULL
    WHERE USERID = p_user_id;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_USER_RESET_LOCKOUT;

/
--------------------------------------------------------
--  DDL for Procedure PRC_USER_RESET_PASSWORD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "AARON_IPT"."PRC_USER_RESET_PASSWORD" (
    p_email IN VARCHAR2,
    p_token OUT VARCHAR2
) AS
    v_user_id NUMBER;
    v_expiry_date DATE;
BEGIN
    -- Check if user exists
    BEGIN
        SELECT USERID INTO v_user_id FROM USERS WHERE EMAIL = p_email;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20003, 'User not found');
    END;

    -- Generate token and set expiry (24 hours)
    p_token := DBMS_RANDOM.STRING('X', 32);
    v_expiry_date := SYSDATE + 1;

    -- Update user with token
    UPDATE USERS 
    SET PASSWORDRESETTOKEN = p_token,
        TOKENEXPIRYDATE = v_expiry_date
    WHERE USERID = v_user_id;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PRC_USER_RESET_PASSWORD;

/
--------------------------------------------------------
--  DDL for Function CALCULATE_REVENUE_STATS2
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "AARON_IPT"."CALCULATE_REVENUE_STATS2" (
    p_start_date IN DATE,
    p_end_date IN DATE
) RETURN SYS_REFCURSOR AS
    v_result SYS_REFCURSOR;
BEGIN
    OPEN v_result FOR
        SELECT
            COUNT(DISTINCT O.ORDERID) AS OrderCount,
            NVL(SUM(O.TOTALAMOUNT), 0) AS TotalRevenue,
            NVL(AVG(O.TOTALAMOUNT), 0) AS AvgOrderValue,
            (SELECT COUNT(DISTINCT USERID) FROM ORDERS 
             WHERE ORDERDATE BETWEEN p_start_date AND p_end_date) AS CustomerCount,
            (SELECT COUNT(*) FROM ORDERDETAILS OD
             JOIN ORDERS O ON OD.ORDERID = O.ORDERID
             WHERE O.ORDERDATE BETWEEN p_start_date AND p_end_date) AS TotalItemsSold,
            (SELECT AVG(DETAIL_COUNT) FROM (
                SELECT O.ORDERID, COUNT(*) AS DETAIL_COUNT 
                FROM ORDERS O
                JOIN ORDERDETAILS OD ON O.ORDERID = OD.ORDERID
                WHERE O.ORDERDATE BETWEEN p_start_date AND p_end_date
                GROUP BY O.ORDERID
             )) AS AvgItemsPerOrder
        FROM
            ORDERS O
        WHERE
            O.ORDERDATE BETWEEN p_start_date AND p_end_date
            AND O.STATUS NOT IN ('Cancelled', 'Rejected');

    RETURN v_result;
END CALCULATE_REVENUE_STATS2;

/
--------------------------------------------------------
--  DDL for Function GET_RECENT_ACTIVITY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "AARON_IPT"."GET_RECENT_ACTIVITY" (
    p_limit IN NUMBER DEFAULT 10
) RETURN SYS_REFCURSOR AS
    v_result SYS_REFCURSOR;
BEGIN
    OPEN v_result FOR
        SELECT * FROM (
            SELECT
                'order' AS ActivityType,
                O.ORDERID AS ID,
                U.USERNAME AS Username,
                'placed an order for ' || TO_CHAR(O.TOTALAMOUNT, 'FM$999,999,990.00') AS Description,
                O.ORDERDATE AS ActivityDate
            FROM
                ORDERS O
                JOIN USERS U ON O.USERID = U.USERID
            WHERE
                O.STATUS NOT IN ('Cancelled', 'Rejected')

            UNION ALL

            SELECT
                'review' AS ActivityType,
                PR.RATINGID AS ID,
                U.USERNAME AS Username,
                'reviewed ' || P.NAME || ' with ' || PR.RATING || ' stars' AS Description,
                PR.DATESUBMITTED AS ActivityDate
            FROM
                PRODUCTRATINGS PR
                JOIN USERS U ON PR.USERID = U.USERID
                JOIN PRODUCTS P ON PR.PRODUCTID = P.PRODUCTID
            WHERE
                PR.ISAPPROVED = 1

            UNION ALL

            SELECT
                'registration' AS ActivityType,
                U.USERID AS ID,
                U.USERNAME AS Username,
                'registered an account' AS Description,
                U.DATE AS ActivityDate
            FROM
                USERS U

            ORDER BY ActivityDate DESC
        ) WHERE ROWNUM <= p_limit;

    RETURN v_result;
END GET_RECENT_ACTIVITY;

/
--------------------------------------------------------
--  DDL for Function GET_REVENUE_BY_TIMEFRAME
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "AARON_IPT"."GET_REVENUE_BY_TIMEFRAME" (
    p_timeframe IN VARCHAR2, -- 'daily', 'weekly', 'monthly', 'yearly'
    p_start_date IN DATE,
    p_end_date IN DATE
) RETURN SYS_REFCURSOR AS
    v_result SYS_REFCURSOR;
BEGIN
    IF p_timeframe = 'daily' THEN
        OPEN v_result FOR
            SELECT 
                TO_CHAR(ORDERDATE, 'YYYY-MM-DD') AS TimePeriod,
                COUNT(ORDERID) AS OrderCount,
                NVL(SUM(TOTALAMOUNT), 0) AS Revenue
            FROM ORDERS
            WHERE ORDERDATE BETWEEN p_start_date AND p_end_date
            AND STATUS NOT IN ('Cancelled', 'Rejected')
            GROUP BY TO_CHAR(ORDERDATE, 'YYYY-MM-DD')
            ORDER BY TimePeriod;
    ELSIF p_timeframe = 'weekly' THEN
        OPEN v_result FOR
            SELECT 
                TO_CHAR(TRUNC(ORDERDATE, 'IW'), 'YYYY-MM-DD') AS WeekStart,
                COUNT(ORDERID) AS OrderCount,
                NVL(SUM(TOTALAMOUNT), 0) AS Revenue
            FROM ORDERS
            WHERE ORDERDATE BETWEEN p_start_date AND p_end_date
            AND STATUS NOT IN ('Cancelled', 'Rejected')
            GROUP BY TO_CHAR(TRUNC(ORDERDATE, 'IW'), 'YYYY-MM-DD')
            ORDER BY WeekStart;
    ELSIF p_timeframe = 'monthly' THEN
        OPEN v_result FOR
            SELECT 
                TO_CHAR(ORDERDATE, 'YYYY-MM') AS Month,
                COUNT(ORDERID) AS OrderCount,
                NVL(SUM(TOTALAMOUNT), 0) AS Revenue
            FROM ORDERS
            WHERE ORDERDATE BETWEEN p_start_date AND p_end_date
            AND STATUS NOT IN ('Cancelled', 'Rejected')
            GROUP BY TO_CHAR(ORDERDATE, 'YYYY-MM')
            ORDER BY Month;
    ELSE -- yearly or default
        OPEN v_result FOR
            SELECT 
                TO_CHAR(ORDERDATE, 'YYYY') AS Year,
                COUNT(ORDERID) AS OrderCount,
                NVL(SUM(TOTALAMOUNT), 0) AS Revenue
            FROM ORDERS
            WHERE ORDERDATE BETWEEN p_start_date AND p_end_date
            AND STATUS NOT IN ('Cancelled', 'Rejected')
            GROUP BY TO_CHAR(ORDERDATE, 'YYYY')
            ORDER BY Year;
    END IF;

    RETURN v_result;
END GET_REVENUE_BY_TIMEFRAME;

/
--------------------------------------------------------
--  DDL for Function GET_REVENUE_SUMMARY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "AARON_IPT"."GET_REVENUE_SUMMARY" (
    p_days IN NUMBER DEFAULT 30
) RETURN SYS_REFCURSOR AS
    v_result SYS_REFCURSOR;
    v_start_date DATE := TRUNC(SYSDATE) - p_days;
    v_prev_start_date DATE := v_start_date - p_days;
    v_prev_end_date DATE := TRUNC(SYSDATE) - p_days - 1;
BEGIN
    OPEN v_result FOR
        SELECT
            'Current' AS Period,
            COUNT(DISTINCT O.ORDERID) AS OrderCount,
            NVL(SUM(O.TOTALAMOUNT), 0) AS TotalRevenue,
            (SELECT COUNT(DISTINCT USERID) FROM ORDERS 
             WHERE ORDERDATE >= v_start_date) AS CustomerCount,
            (SELECT COUNT(DISTINCT PRODUCTID) FROM ORDERDETAILS OD
             JOIN ORDERS O ON OD.ORDERID = O.ORDERID
             WHERE O.ORDERDATE >= v_start_date) AS ProductCount
        FROM
            ORDERS O
        WHERE
            O.ORDERDATE >= v_start_date
            AND O.STATUS NOT IN ('Cancelled', 'Rejected')

        UNION ALL

        SELECT
            'Previous' AS Period,
            COUNT(DISTINCT O.ORDERID) AS OrderCount,
            NVL(SUM(O.TOTALAMOUNT), 0) AS TotalRevenue,
            (SELECT COUNT(DISTINCT USERID) FROM ORDERS 
             WHERE ORDERDATE BETWEEN v_prev_start_date AND v_prev_end_date) AS CustomerCount,
            (SELECT COUNT(DISTINCT PRODUCTID) FROM ORDERDETAILS OD
             JOIN ORDERS O ON OD.ORDERID = O.ORDERID
             WHERE O.ORDERDATE BETWEEN v_prev_start_date AND v_prev_end_date) AS ProductCount
        FROM
            ORDERS O
        WHERE
            O.ORDERDATE BETWEEN v_prev_start_date AND v_prev_end_date
            AND O.STATUS NOT IN ('Cancelled', 'Rejected');

    RETURN v_result;
END GET_REVENUE_SUMMARY;

/
--------------------------------------------------------
--  DDL for Function GET_SALES_BY_CATEGORY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "AARON_IPT"."GET_SALES_BY_CATEGORY" (
    p_start_date IN DATE,
    p_end_date IN DATE
) RETURN SYS_REFCURSOR AS
    v_result SYS_REFCURSOR;
    v_total_revenue NUMBER;
BEGIN
    -- First calculate total revenue in a separate query
    SELECT NVL(SUM(OD.PRICE * OD.QUANTITY), 0)
    INTO v_total_revenue
    FROM ORDERDETAILS OD
    JOIN ORDERS O ON OD.ORDERID = O.ORDERID
    WHERE O.ORDERDATE BETWEEN p_start_date AND p_end_date
    AND O.STATUS NOT IN ('Cancelled', 'Rejected');

    -- Now use this value in the main query
    OPEN v_result FOR
        SELECT
            C.CATEGORYID,
            C.NAME AS CategoryName,
            COUNT(DISTINCT O.ORDERID) AS OrderCount,
            SUM(OD.QUANTITY) AS QuantitySold,
            NVL(SUM(OD.PRICE * OD.QUANTITY), 0) AS Revenue,
            CASE
                WHEN v_total_revenue > 0 THEN
                    ROUND(NVL(SUM(OD.PRICE * OD.QUANTITY), 0) / v_total_revenue * 100, 2)
                ELSE 0
            END AS PercentageOfTotal
        FROM
            CATEGORIES C
            JOIN PRODUCTCATEGORIES PC ON C.CATEGORYID = PC.CATEGORYID -- Corrected Join
            JOIN PRODUCTS P ON PC.PRODUCTID = P.PRODUCTID          -- Corrected Join
            JOIN ORDERDETAILS OD ON P.PRODUCTID = OD.PRODUCTID
            JOIN ORDERS O ON OD.ORDERID = O.ORDERID
        WHERE
            O.ORDERDATE BETWEEN p_start_date AND p_end_date
            AND O.STATUS NOT IN ('Cancelled', 'Rejected')
        GROUP BY
            C.CATEGORYID, C.NAME
        ORDER BY
            Revenue DESC; -- Order by calculated alias

    RETURN v_result;
END GET_SALES_BY_CATEGORY;

/
--------------------------------------------------------
--  DDL for Function GET_TOP_SELLING_PRODUCTS
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "AARON_IPT"."GET_TOP_SELLING_PRODUCTS" (
    p_start_date IN DATE,
    p_end_date IN DATE,
    p_limit IN NUMBER
) RETURN SYS_REFCURSOR AS
    v_result SYS_REFCURSOR;
BEGIN
    OPEN v_result FOR
        SELECT * FROM (
            SELECT 
                p.PRODUCTID,
                p.NAME AS ProductName,
                NVL(SUM(od.QUANTITY), 0) AS QuantitySold,
                NVL(SUM(od.QUANTITY * od.PRICE), 0) AS Revenue
            FROM 
                PRODUCTS p
            LEFT JOIN 
                ORDERDETAILS od ON p.PRODUCTID = od.PRODUCTID
            LEFT JOIN 
                ORDERS o ON od.ORDERID = o.ORDERID
            WHERE 
                (o.ORDERDATE BETWEEN p_start_date AND p_end_date OR o.ORDERDATE IS NULL)
                AND (o.STATUS = 'Approved' OR o.STATUS IS NULL)
                AND p.ISACTIVE = 1
                AND (o.ISACTIVE = 1 OR o.ISACTIVE IS NULL)
            GROUP BY 
                p.PRODUCTID, p.NAME
            ORDER BY 
                QuantitySold DESC
        ) WHERE ROWNUM <= p_limit;

    RETURN v_result;
END;

/
--------------------------------------------------------
--  DDL for Function GET_TOTAL_REVENUE
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "AARON_IPT"."GET_TOTAL_REVENUE" (
    p_timeframe IN VARCHAR2,
    p_start_date IN DATE,
    p_end_date IN DATE
) RETURN NUMBER AS
    v_total_revenue NUMBER := 0;
BEGIN
    SELECT NVL(SUM(TOTALAMOUNT), 0)
    INTO v_total_revenue
    FROM ORDERS
    WHERE ORDERDATE BETWEEN p_start_date AND p_end_date
    AND STATUS NOT IN ('Cancelled', 'Rejected');

    RETURN v_total_revenue;
END;

/
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."USERS" MODIFY ("LASTNAME" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."USERS" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."USERS" ADD UNIQUE ("PHONENUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."USERS" ADD UNIQUE ("EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."USERS" ADD UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."USERS" ADD PRIMARY KEY ("USERID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."USERS" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."USERS" MODIFY ("PASSWORDHASH" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."USERS" MODIFY ("USERNAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CATEGORIES
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."CATEGORIES" ADD UNIQUE ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."CATEGORIES" ADD PRIMARY KEY ("CATEGORYID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."CATEGORIES" MODIFY ("NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WISHLIST
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."WISHLIST" ADD PRIMARY KEY ("WISHLISTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."WISHLIST" MODIFY ("PRODUCTID" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."WISHLIST" MODIFY ("USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SETTINGS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."SETTINGS" ADD UNIQUE ("KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."SETTINGS" ADD PRIMARY KEY ("SETTINGID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."SETTINGS" MODIFY ("KEY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ORDERS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."ORDERS" ADD PRIMARY KEY ("ORDERID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."ORDERS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."ORDERS" MODIFY ("TOTALAMOUNT" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."ORDERS" MODIFY ("USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ORDERDETAILS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."ORDERDETAILS" ADD PRIMARY KEY ("ORDERDETAILID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."ORDERDETAILS" MODIFY ("PRICE" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."ORDERDETAILS" MODIFY ("QUANTITY" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."ORDERDETAILS" MODIFY ("PRODUCTID" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."ORDERDETAILS" MODIFY ("ORDERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PRODUCTRATINGS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."PRODUCTRATINGS" ADD PRIMARY KEY ("RATINGID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."PRODUCTRATINGS" MODIFY ("RATING" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."PRODUCTRATINGS" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."PRODUCTRATINGS" MODIFY ("PRODUCTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."PRODUCTS" ADD UNIQUE ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."PRODUCTS" ADD PRIMARY KEY ("PRODUCTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."PRODUCTS" MODIFY ("STOCKQUANTITY" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."PRODUCTS" MODIFY ("PRICE" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."PRODUCTS" MODIFY ("NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VOUCHERS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."VOUCHERS" ADD UNIQUE ("CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."VOUCHERS" ADD PRIMARY KEY ("VOUCHERID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."VOUCHERS" MODIFY ("CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VOUCHERUSAGE
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."VOUCHERUSAGE" ADD PRIMARY KEY ("VOUCHERUSAGEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."VOUCHERUSAGE" MODIFY ("ORDERID" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."VOUCHERUSAGE" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."VOUCHERUSAGE" MODIFY ("VOUCHERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PRODUCTCATEGORIES
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."PRODUCTCATEGORIES" ADD PRIMARY KEY ("PRODUCTCATEGORYID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "AARON_IPT"."PRODUCTCATEGORIES" MODIFY ("CATEGORYID" NOT NULL ENABLE);
  ALTER TABLE "AARON_IPT"."PRODUCTCATEGORIES" MODIFY ("PRODUCTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table CATEGORIES
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."CATEGORIES" ADD CONSTRAINT "FK_PARENT_CATEGORY" FOREIGN KEY ("PARENTCATEGORYID")
	  REFERENCES "AARON_IPT"."CATEGORIES" ("CATEGORYID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDERDETAILS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."ORDERDETAILS" ADD CONSTRAINT "FK_ORDERDETAILS_ORDER" FOREIGN KEY ("ORDERID")
	  REFERENCES "AARON_IPT"."ORDERS" ("ORDERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "AARON_IPT"."ORDERDETAILS" ADD CONSTRAINT "FK_ORDERDETAILS_PRODUCT" FOREIGN KEY ("PRODUCTID")
	  REFERENCES "AARON_IPT"."PRODUCTS" ("PRODUCTID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDERS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."ORDERS" ADD CONSTRAINT "FK_ORDERS_USER" FOREIGN KEY ("USERID")
	  REFERENCES "AARON_IPT"."USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTCATEGORIES
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."PRODUCTCATEGORIES" ADD CONSTRAINT "FK_PRODUCTCAT_CATEGORY" FOREIGN KEY ("CATEGORYID")
	  REFERENCES "AARON_IPT"."CATEGORIES" ("CATEGORYID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "AARON_IPT"."PRODUCTCATEGORIES" ADD CONSTRAINT "FK_PRODUCTCAT_PRODUCT" FOREIGN KEY ("PRODUCTID")
	  REFERENCES "AARON_IPT"."PRODUCTS" ("PRODUCTID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTRATINGS
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."PRODUCTRATINGS" ADD CONSTRAINT "FK_RATINGS_PRODUCT" FOREIGN KEY ("PRODUCTID")
	  REFERENCES "AARON_IPT"."PRODUCTS" ("PRODUCTID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "AARON_IPT"."PRODUCTRATINGS" ADD CONSTRAINT "FK_RATINGS_USER" FOREIGN KEY ("USERID")
	  REFERENCES "AARON_IPT"."USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VOUCHERUSAGE
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."VOUCHERUSAGE" ADD CONSTRAINT "FK_VOUCHERUSAGE_ORDER" FOREIGN KEY ("ORDERID")
	  REFERENCES "AARON_IPT"."ORDERS" ("ORDERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "AARON_IPT"."VOUCHERUSAGE" ADD CONSTRAINT "FK_VOUCHERUSAGE_USER" FOREIGN KEY ("USERID")
	  REFERENCES "AARON_IPT"."USERS" ("USERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "AARON_IPT"."VOUCHERUSAGE" ADD CONSTRAINT "FK_VOUCHERUSAGE_VOUCHER" FOREIGN KEY ("VOUCHERID")
	  REFERENCES "AARON_IPT"."VOUCHERS" ("VOUCHERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table WISHLIST
--------------------------------------------------------

  ALTER TABLE "AARON_IPT"."WISHLIST" ADD CONSTRAINT "FK_WISHLIST_PRODUCT" FOREIGN KEY ("PRODUCTID")
	  REFERENCES "AARON_IPT"."PRODUCTS" ("PRODUCTID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "AARON_IPT"."WISHLIST" ADD CONSTRAINT "FK_WISHLIST_USER" FOREIGN KEY ("USERID")
	  REFERENCES "AARON_IPT"."USERS" ("USERID") ON DELETE CASCADE ENABLE;
